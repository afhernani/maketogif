#!/usr/bin/env python3

import os
import sys
import subprocess
import optparse
import datetime
import re
import shutil


def printOutput(string):
    '''
    Pretty print multi-line string
    '''
    for line in string.splitlines():
        print('    >> {}'.format(line.decode('utf8')))


def runCommand(command):
    p = subprocess.Popen(command, shell=False, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).stdout
    while True and p:
        line = p.readline()
        if not line:
            break
        printOutput(line)


if __name__ == '__main__':
    parser = optparse.OptionParser(usage="Usage: %prog [options] video-file")
    parser.add_option("-s", "--start", dest="start", action="store", type='string', help="Start time")
    parser.add_option("-d", "--duration", dest="duration", action="store", type='string', help="Duration")
    parser.add_option("--fps", dest="fps", action="store", type='string', help="FPS", default="1")
    parser.add_option("--colors", dest="colors", action="store", type='string', help="Number of colors")
    parser.add_option("--resize", dest="resize", action="store", type='string', help="Size wxh use 200:-1 for proportion h")
    parser.add_option("--mono", dest="mono", action="store_true", help="Monochrome")
    parser.add_option("--gray", dest="gray", action="store_true", help="Grayscale")
    (options, args) = parser.parse_args()

    if len(args) == 0:
        print('Missing file')
        print('Try -h or --help for help')
        sys.exit(1)

    video = args[0]
    print("Extracting frames from %s..." % video)

    if not os.path.exists(video):
        print("File not found")
        sys.exit(1)

    command = ['ffmpeg']

    if args:
        command.extend(['-i', video]);

    if options.start:
        command.extend(['-ss', options.start])

    if options.duration:
        command.extend(['-t', options.duration])

    fps = ''
    try:
        fps = subprocess.check_output(['ffmpeg', '-i', video], stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as e:
        fps = e.output
        pass

    if options.fps:
        fps = options.fps
    else:
        fps = fps.decode('utf-8')
        match = re.search('(\d\d) fps', fps)
        if match is None:
            print('FPS not found')
            sys.exit(1)
        fps = match.group(1)

    command.extend(['-r', '1/'+ fps])

    if options.resize:
        command.extend(['-vf',  'scale=' + options.resize])

    WORKING_DIR = 'work/frames/gif-frames'  # en linux '/tmp/gif-frames'
    working_dir = os.path.join(os.path.abspath(os.getcwd()), WORKING_DIR)
    print(working_dir)
    working_app = os.path.dirname(__file__)
    print(working_app)

    if os.path.exists(WORKING_DIR):
        shutil.rmtree(WORKING_DIR)
    os.mkdir(WORKING_DIR)

    command.extend([WORKING_DIR + '/frame-%03d.png']);
    runCommand(command)

    framerate = '1' # str(1/int(fps)) # numerador de 100 a 1

    print("Making GIF animation @ %s FPS..." % fps)

    output = os.path.splitext(video)[0] + '.gif'
    command = ['ffmpeg', '-y']
    command.extend(['-framerate', framerate])
    
    if options.colors:
        command.extend(['-colors', options.colors])

    if options.mono:
        command.extend(['-monochrome'])

    if options.gray:
        command.extend(['-colorspace', 'gray'])

    command.extend(['-i', WORKING_DIR + '/frame-%03d.png'])

    command.extend([output])
    
    runCommand(command)

    size = os.path.getsize(output) / 1000000

    print("Created %s (%0.1f MB)" % (output, size))
